if #arg ~= 2 then
	print('usage: lua ' .. arg[0] .. ' <config> <srcpath>')
	return nil
end

local config_file, path_prefix = arg[1], arg[2]

local fh = io.open(path_prefix .. '/.build')
if fh == nil then
	print("No .build found in path '" .. path_prefix .. "'")
	print('Are you sure the directory exists and is a valid source tree?')
	return
end
local fh_contents = fh:read('*all')
fh:close()
print(fh_contents)

print 'Reading config file.'
local fh    = assert(io.open(config_file))
local code  = fh:read('*all')

local config_env = {
	S3IX_SERVICES_BUILTIN={},
	BUILD_BOOTRD={},
	BUILD_KORDER={},
}

-- Helper functions:
function config_env.service(path)
	table.insert(config_env.S3IX_SERVICES_BUILTIN, path)
end
function config_env.bootrd(path)
	table.insert(config_env.BUILD_BOOTRD, path)
end
function config_env.kernel(path)
	table.insert(config_env.BUILD_KORDER, path)
end

local chunk = assert(load(code, 'build_config', nil, config_env))
chunk()

fh:close()
config_env.service = nil

-- Really simple (and not the best by any means) serializer:
function serialize(t)
	function _serialize(t)
		local s = ''
		for k,v in pairs(t) do
			if type(v) ~= 'function' then
				if type(k) == 'number' then s = s .. "[" .. k .. "]="
				else s = s .. "['" .. k .. "']=" end

				if type(v) == 'table' then s = s .. serialize(v) .. ','
				elseif type(v) == 'string' then s = s .. "'" .. v .. "',"
				else s = s .. v .. ',' end
			end
		end
		return s
	end

	local s = '{'
	s = s .. _serialize(t) .. '}'
	return s
end

function generate_bootrd()
	local s = ''
	for _, v in pairs(config_env.BUILD_BOOTRD) do
		print('adding bootrd entry: ' .. v)
		local fh = io.open(v)
		local contents = fh:read('*all')
		fh:close()
		s = s .. "['" .. v .. "']=[==[ " .. contents .. "]==],"
	end
	return s
end

local image = ''

-- Phase 1: provide configuration:
image = image .. "-- DO NOT EDIT! THIS FILE WAS AUTOGENERATED BY THE S3IX BUILD SYSTEM! --\n"
image = image .. "CONFIG=" .. serialize(config_env) .. "\n"
image = image .. "BOOTRD={" .. generate_bootrd() .. "}\n"

for _, v in ipairs(config_env.BUILD_KORDER) do
	print('adding kernel segment: ' .. v)
	local fh = io.open(v)
	local contents = fh:read('*all')
	fh:close()

	image = image .. contents .. "\n"
end

local fh = io.open(config_env.BUILD_DESTDIR .. '/' .. config_env.BUILD_IMGNAME, 'wb')
fh:write(image)
fh:close()
